<div class="table-responsive">




    <div id="conversation"></div>

</div>
<div id="dashboard">
    <div id="chart" style='width: 1500px; height: 500px;'></div>
    <div id="control" style='width: 1500px; height: 50px;'></div>
</div>
<div id="table_div"></div>
<div id="chart_div2"></div>
<div id="chart_div3"></div>
<div id="chart_div4"></div>
<div id="visualization" style="width: 800px; height: 400px;"></div>

</div>

<script>

    var options = {'showRowNumber': true,
        'sort':'enable',
        'sortAscending':false,
        'sortColumn':0};
    options['page'] = 'enable';
    options['pageSize'] = 10;
    options['pagingSymbols'] = {prev: 'prev', next: 'next'};
    options['pagingButtonsConfiguration'] = 'auto';

    var options3 = {'title':'Line chart',
        'width':900,
        'height':300};
    var options4 = {'title':'Line chart',
        'width':900,
        'height':300};


    var dashboard = new google.visualization.Dashboard(
            document.getElementById('dashboard'));

    var control = new google.visualization.ControlWrapper({
        'controlType': 'ChartRangeFilter',
        'containerId': 'control',
        'options': {
            // Filter by the date axis.
            'filterColumnIndex': 0,
            'ui': {
                'chartType': 'LineChart',
                'chartOptions': {
                    'chartArea': {'width': '90%'},
                    'hAxis': {'baselineColor': 'none'}
                },
                // Display a single series that shows the closing value of the stock.
                // Thus, this view has two columns: the date (axis) and the stock value (line series).
                'chartView': {
                    'columns': [0, 3]
                },
                // 1 day in milliseconds = 24 * 60 * 60 * 1000 = 86,400,000
                'minRangeSize': 300000
            }
        },
        // Initial range: 2012-02-09 to 2012-03-20.
        'state': {'range': {'start': new Date(2014, 2, 10), 'end': new Date(2014,2, 11)}}
    });

    var chart = new google.visualization.ChartWrapper({
        'chartType': 'CandlestickChart',
        'containerId': 'chart',
        'options': {
            // Use the same chart area width as the control for axis alignment.
            'chartArea': {'height': '80%', 'width': '90%'},
            'hAxis': {'slantedText': false},

            'legend': {'position': 'none'}
        },
        'view': {
            'columns': [
                {
                    'calc': function(dataTable, rowIndex) {
                        return dataTable.getFormattedValue(rowIndex, 0);
                    },
                    'type': 'string'
                }, 1, 2, 3, 4]
        }

        // Convert the first column from 'date' to 'string'.

    });

</script>
<script>
    var socket = io.connect('http://localhost');
    socket.on('connect', function(){
        // call the server-side function 'adduser' and send one parameter (value of prompt)

    });
    socket.on('eventUpdate', function( data ) {
        //console.log(data);
        var equity = extractEquity(data.equity);
        var data3 =  google.visualization.arrayToDataTable(equity, true);

        var chart3 = new google.visualization.LineChart(document.getElementById('chart_div3'));
        chart3.draw(data3, options3);

        var events = extractEvents(data.events);

        var data1 =  google.visualization.arrayToDataTable(events, true);

        var table = new google.visualization.Table(document.getElementById('table_div'));
        table.draw(data1, options);

        var myEvents = extractAnnotatedEvents(datesAndEvents);
        var data4= google.visualization.arrayToDataTable(myEvents, true);
        var annotatedtimeline = new google.visualization.AnnotatedTimeLine(
                document.getElementById('visualization'));
        annotatedtimeline.draw(data4, {'displayAnnotations': true,
            'scaleType':'maximized'});



    });

    socket.on('ohlcUpdate', function(data){
        //console.log( data);
        plotdata=extractOHLC(data);
        var d = google.visualization.arrayToDataTable(plotdata, true);



        dashboard.bind(control, chart);
        dashboard.draw(d);


    });
    socket.on('news', function ( data) {
        $('#conversation').append( data + '<br>');
        //console.log(data);
        if(data instanceof Array){
            var mydata=new Array();

            data.forEach(function(subArray){
                mydata.push([parseInt(subArray[0]),parseInt(subArray[0])]);
            });

            console.log(mydata);

            var data4 =  google.visualization.arrayToDataTable(mydata, true);

            var chart4 = new google.visualization.LineChart(document.getElementById('chart_div4'));
            chart4.draw(data4,options4);

        }

    });
</script>


<script>
    var results = <%- JSON.stringify(r) %>;
    var array=results.ohlc.data;
    var equity = new Array();
    var events = new Array();
    var datesAndEvents = {};

    var extractOHLC= function(array)
    {
        var data = new Array();
        array.forEach(function(subArray){
            var tmp= new Array();
            //tmp.push( subArray[0].concat(" ",subArray[1],":00"));
            d=subArray[0].split("/");
            t=subArray[1].split(":");
            //console.log(d);
            //console.log(t);
            var date= new Date(d[2],d[0],d[1],t[0],t[1],0,0);
            //console.log(date);
            tmp.push(date);

            //console.log(tmp);
            //for(var i=2; i<6; i++) {
            tmp.push(parseFloat(subArray[4]));  //low
            tmp.push(parseFloat(subArray[2]));  //open
            tmp.push(parseFloat(subArray[5]));  //close
            tmp.push(parseFloat(subArray[3]));   //high
            //}
            //console.log(tmp);
            data.push(tmp);
            datesAndEvents[date.getTime()]=[date, parseFloat(subArray[5]), null, null];
        })
        return data;
    }
    data=extractOHLC(array);

    var extractEvents= function(e)
    {
        results.pnl.event.forEach(function(subArray){
            var tmp = new Array();
            if(  (new Date(subArray[0]).getTime()) in datesAndEvents ) {
                //console.log(subArray[0] + "found and added" );

                datesAndEvents[new Date(subArray[0]).getTime()][2]=subArray[1];
                datesAndEvents[new Date(subArray[0]).getTime()][3]=subArray[2];
            }
            else{
                console.log(subArray[0]+"not found");
            }

            for(var i=0; i<subArray.length; i++){
                tmp.push(subArray[i]);
            }
            events.push(tmp);
        });
        return events;
    }
    events=extractEvents(results.pnl.event);

    var extractEquity=function(e)
    {
        e.forEach(function(subArray){
            var tmp = new Array();
            tmp.push(subArray[0]);
            tmp.push(parseFloat(subArray[1]));
            equity.push(tmp);


        });
        return equity;
    }
    equity=extractEquity(results.pnl.equity);

    var extractAnnotatedEvents=function(datesAndEvents)
    {
    var myEvents=new Array();
    for (var key in datesAndEvents){
        myEvents.push(datesAndEvents[key]);
    }
        return myEvents
    }

    myEvents=extractAnnotatedEvents(datesAndEvents);

</script>




<script type="text/javascript">
    function drawVisualization() {

        // Instantiate and draw our chart, passing in some options.

       var data1 =  google.visualization.arrayToDataTable(events, true);
        var table = new google.visualization.Table(document.getElementById('table_div'));
        table.draw(data1, options);



        var dashboard = new google.visualization.Dashboard(
                document.getElementById('dashboard'));

        var control = new google.visualization.ControlWrapper({
            'controlType': 'ChartRangeFilter',
            'containerId': 'control',
            'options': {
                // Filter by the date axis.
                'filterColumnIndex': 0,
                'ui': {
                    'chartType': 'LineChart',
                    'chartOptions': {
                        'chartArea': {'width': '90%'},
                        'hAxis': {'baselineColor': 'none'}
                    },
                    // Display a single series that shows the closing value of the stock.
                    // Thus, this view has two columns: the date (axis) and the stock value (line series).
                    'chartView': {
                        'columns': [0, 3]
                    },
                    // 1 day in milliseconds = 24 * 60 * 60 * 1000 = 86,400,000
                    'minRangeSize': 300000
                }
            },
            // Initial range: 2012-02-09 to 2012-03-20.
            'state': {'range': {'start': new Date(2014, 2, 10), 'end': new Date(2014,2, 11)}}
        });

        var chart = new google.visualization.ChartWrapper({
            'chartType': 'CandlestickChart',
            'containerId': 'chart',
            'options': {
                // Use the same chart area width as the control for axis alignment.
                'chartArea': {'height': '80%', 'width': '90%'},
                'hAxis': {'slantedText': false},

                'legend': {'position': 'none'}
            },
            'view': {
                'columns': [
                    {
                        'calc': function(dataTable, rowIndex) {
                            return dataTable.getFormattedValue(rowIndex, 0);
                        },
                        'type': 'string'
                    }, 1, 2, 3, 4]
            }

            // Convert the first column from 'date' to 'string'.

        });

        var d = google.visualization.arrayToDataTable(data, true);

        dashboard.bind(control, chart);
        dashboard.draw(d);


        var data3 =  google.visualization.arrayToDataTable(equity, true);


          var chart3 = new google.visualization.LineChart(document.getElementById('chart_div3'));
          chart3.draw(data3, options3);

        var data4= google.visualization.arrayToDataTable(myEvents, true);
        var annotatedtimeline = new google.visualization.AnnotatedTimeLine(
                document.getElementById('visualization'));
        annotatedtimeline.draw(data4, {'displayAnnotations': true,
        'scaleType':'maximized'});
    }


    google.setOnLoadCallback(drawVisualization);
</script>